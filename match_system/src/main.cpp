// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "match_server/Match.h"
#include "save_client/Save.h"


#include <thrift/protocol/TBinaryProtocol.h>
#include <thrift/server/TSimpleServer.h>
#include <thrift/transport/TServerSocket.h>
#include <thrift/transport/TBufferTransports.h>
#include <thrift/transport/TSocket.h>
#include <thrift/transport/TTransportUtils.h>

#include <iostream>
#include <thread>
#include <mutex>
#include <condition_variable>
#include <queue>
#include <vector>

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

using namespace ::match_service;
using namespace ::save_service;

using namespace std;

void print(User user){
    cout << user.id<<" "<<user.name<<" "<<user.score<<endl;
}

struct Task{
    User user;
    string type;
};

struct MessageQueue{
    queue<Task> q;
    mutex m;
    condition_variable cv;
}message_queue;

class Pool
{
    public:

        void save_result(User a,User b)
        {
            printf("Match Result: \n");
            print(a);
            print(b);

            
            // save_client
            std::shared_ptr<TTransport> socket(new TSocket("123.57.47.211", 9090));
            std::shared_ptr<TTransport> transport(new TBufferedTransport(socket));
            std::shared_ptr<TProtocol> protocol(new TBinaryProtocol(transport));
            SaveClient client(protocol);

            try {
                transport->open();
                client.save_data("acs_557","92ce770c",a.id,b.id);
                transport->close();
            } catch (TException& tx) {
                cout << "ERROR: " << tx.what() << endl;
            }
            
        }

        void match()
        {
            sort(users.begin(),users.end(),[&](User &a, User &b){
                return a.score < b.score;
            });

            while(users.size() > 1)
            {
                bool flag = true;
                for(auto it=users.begin()+1;it!=users.end();it++)
                {
                    auto t=it-1;
                    if( (*it).score - (*t).score <= 50 )
                    {
                        flag = false;
                        save_result(*t , *it);
                        users.erase(t,it+1);
                        break;
                    }
                }
                if(flag) break;
            }
        }


        void add(User user)
        {
            users.push_back(user);
        }

        void remove(User user)
        {
            for(auto it=users.begin();it!=users.end();it++)
            {
                if((*it).id == user.id)
                {
                    users.erase(it);
                    break;
                }
            }
        }

    private:
        vector<User> users;
}pool;




class MatchHandler : virtual public MatchIf {
    public:
        MatchHandler() {
            // Your initialization goes here
        }

        int32_t add_user(const User& user, const std::string& info) {
            // Your implementation goes here
            printf("add_user\n");
            print(user);

            unique_lock<mutex> lck(message_queue.m);
            message_queue.q.push({user,"add"});
            message_queue.cv.notify_all();

            return 0;
        }

        int32_t remove_user(const User& user, const std::string& info) {
            // Your implementation goes here
            printf("remove_user\n");
            print(user);

            unique_lock<mutex> lck(message_queue.m);
            message_queue.q.push({user,"remove"});
            message_queue.cv.notify_all();

            return 0;
        }

};


void consume_task()
{
    while(true)
    {
        unique_lock<mutex> lck(message_queue.m);
        if(message_queue.q.empty())
        {
            // message_queue.cv.wait(lck);
            lck.unlock();
            pool.match();
            sleep(1);
        }
        else
        {
            auto task = message_queue.q.front();
            message_queue.q.pop();
            lck.unlock();

            // do task
            if(task.type == "add") pool.add(task.user);
            else if(task.type == "remove") pool.remove(task.user);

            pool.match();
        }
    }
}

int main(int argc, char **argv) {
    int port = 9090;
    ::std::shared_ptr<MatchHandler> handler(new MatchHandler());
    ::std::shared_ptr<TProcessor> processor(new MatchProcessor(handler));
    ::std::shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
    ::std::shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
    ::std::shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

    cout << "Start Match Server!" << endl;

    thread matching_thread(consume_task);



    TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
    server.serve();
    return 0;
}

